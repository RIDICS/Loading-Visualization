{"version":3,"sources":["main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["class lv {\r\n    public initLoaderAll(): void {\r\n        // iterates through everything and adds specified number of divs\r\n        // for(let key in this.elements) {\r\n        //     let elementsOfClass: HTMLCollectionOf<HTMLDivElement> = <HTMLCollectionOf<HTMLDivElement>>document.getElementsByClassName(key);\r\n        //     console.log(elementsOfClass);\r\n        //     for(let i = 0; i < elementsOfClass.length; i += 1) {\r\n        //         // condition if the div is empty <=> new; otherwise the divs are not added\r\n        //         if (!elementsOfClass.item(i).hasChildNodes()) {\r\n        //             this.fillElement(elementsOfClass.item(i), key, this.elements[key]);\r\n        //         }\r\n        //     }\r\n        // }\r\n\r\n    }\r\n\r\n    public create(element: HTMLDivElement): lv.ElementBase {\r\n        let classes: DOMTokenList = element.classList;\r\n        for (let i = 0; i < classes.length; i++) {\r\n            switch (classes[i]) {\r\n                case \"lv-bars\":\r\n                    return new lv.Circle(element, lv.CircleType.Bars);\r\n                case \"lv-squares\":\r\n                    return new lv.Circle(element, lv.CircleType.Squares);\r\n                case \"lv-circles\":\r\n                    return new lv.Circle(element, lv.CircleType.Circles);\r\n                case \"lv-dots\":\r\n                    return new lv.Circle(element, lv.CircleType.Dots);\r\n                case \"lv-spinner\":\r\n                    return new lv.Circle(element, lv.CircleType.Spinner);\r\n                case \"lv-dashed\":\r\n                    return new lv.Circle(element, lv.CircleType.Dashed);\r\n                case \"lv-determinate_circle\":\r\n                    return new lv.Circle(element, lv.CircleType.DeterminateCircle);\r\n                case \"lv-line\":\r\n                    return new lv.Bar(element, lv.BarType.Line);\r\n                case \"lv-bordered_line\":\r\n                    return new lv.Bar(element, lv.BarType.BorderedLine);\r\n                case \"lv-determinate_line\":\r\n                    return new lv.Bar(element, lv.BarType.DeterminateLine);\r\n                case \"lv-determinate_bordered_line\":\r\n                    return new lv.Bar(element, lv.BarType.DeterminateBorderedLine);\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    // automatically detects new elements in DOM and appends divs to them (calls function complete_divs();\r\n    // defining what to do on change of DOM - child mutation\r\n    private callback(mutationList, observer: MutationObserver): void {\r\n        mutationList.forEach((mutation) => {\r\n            if (mutation.type === \"childList\") {\r\n                try {\r\n                    if (mutation.addedNodes[0].classList.length > 0) {\r\n                        // filling the node with divs when it is empty\r\n                        console.log(mutation.addedNodes[0]);\r\n                        this.create(mutation.addedNodes[0]);\r\n                    }\r\n                } catch (error) {}\r\n            }\r\n        });\r\n    };\r\n    // initializing the observer and starting observation\r\n    private observer: MutationObserver;\r\n    constructor() {\r\n        this.observer = new MutationObserver(this.callback);\r\n    }\r\n    public startObserving() {\r\n        this.observer.observe(document.body, {childList: true, subtree: true});\r\n    }\r\n}\r\nnamespace lv {\r\n    interface IDictionary {\r\n        [key: number]: IDescription;\r\n    }\r\n    interface IDescription {\r\n        divCount: number;\r\n        className: string;\r\n    }\r\n    export abstract class ElementBase {\r\n        \r\n        protected element: HTMLDivElement;\r\n        \r\n        constructor(element: HTMLDivElement) {\r\n            this.element = element;\r\n        }\r\n\r\n        public show(): void {\r\n            this.element.style.display = null;\r\n        }\r\n\r\n        public hide(): void {\r\n            this.element.style.display = \"none\";\r\n        }\r\n\r\n        public abstract update(type: string, newValue: number, maxValue: number): void;\r\n\r\n        // resets specified element\r\n        public reset(maxValue: number): void {\r\n                this.update('set', 0, maxValue);\r\n        }\r\n\r\n        // fills whole loading bar\r\n        public fill(maxValue: number): void {\r\n                this.update('set', maxValue, maxValue);\r\n        }\r\n\r\n        // adds value to loading bar\r\n        public add(addValue: number, maxValue: number): void {\r\n                this.update('add', addValue, maxValue);\r\n        }\r\n\r\n        // fills all spinners with appropriate number of divs\r\n        public initLoader(loaderElement: HTMLDivElement, description: IDescription): void {\r\n            // manual addition on specified object\r\n            if (loaderElement.hasChildNodes) {\r\n                this.fillElement(loaderElement, description.className, description.divCount);\r\n            }\r\n        }\r\n\r\n        private fillElement(element: HTMLElement, elementClass: string, divNumber: number): void {\r\n            for (let i = 0; i < divNumber; i += 1) {\r\n                element.appendChild(document.createElement(\"DIV\"));\r\n            }\r\n            if (elementClass === \"lv-determinate_circle\" || elementClass === \"lv-determninate_line\" || elementClass === \"lv-determinate_bordered_line\") {\r\n                element.lastElementChild.innerHTML = \"0\";\r\n            }\r\n            if (!element.classList.contains(elementClass)) {\r\n                element.classList.add(elementClass);\r\n            }\r\n        };\r\n    }\r\n\r\n    export class Bar extends ElementBase {\r\n        private divCount: IDictionary = {};\r\n\r\n        constructor(element: HTMLDivElement, barType: BarType, classes: string = null) {\r\n            super(element);\r\n            this.divCount[BarType.Line] = {className: \"lv-line\", divCount: 1};\r\n            this.divCount[BarType.BorderedLine] = {className: \"lv-bordered_line\", divCount: 1};\r\n            this.divCount[BarType.DeterminateLine] = {className: \"lv-determinate_line\", divCount: 2};\r\n            this.divCount[BarType.DeterminateBorderedLine] = {className: \"lv-determinate_bordered_line\", divCount: 2};\r\n            this.initLoader(element, this.divCount[barType]);\r\n            element.classList.add(classes);\r\n        }\r\n\r\n        update(type: string, newValue: number, maxValue: number): void {\r\n            // getting current width of line from the page\r\n            let line: HTMLDivElement = <HTMLDivElement>this.element.firstElementChild;\r\n            let currentWidth: number = parseInt(line.style.width);\r\n            // protective condition for empty line\r\n            if (isNaN(currentWidth)) {\r\n                currentWidth = 0;\r\n            }\r\n            // end point of the animation\r\n            let goalWidth: number;\r\n            if (type === \"add\") {\r\n                goalWidth = currentWidth + Math.round((newValue / maxValue) * 100);\r\n            } else if (type === \"set\") {\r\n                goalWidth = Math.round((newValue / maxValue) * 100);\r\n            }\r\n            // prevent overflow from both sides\r\n            if (goalWidth > 100) {\r\n                goalWidth = 100;\r\n            }\r\n            if (goalWidth < 0) {\r\n                goalWidth = 0;\r\n            }\r\n            let animation = setInterval(frame, 5);\r\n            function frame() {\r\n                if (currentWidth === goalWidth) { // stopping animation when end point is reached\r\n                    clearInterval(animation);\r\n                } else if (currentWidth > goalWidth) { // shortening the line\r\n                    currentWidth -= 0.5;\r\n                } else { // extending the line\r\n                    currentWidth += 0.5;\r\n                }\r\n                line.style.width = currentWidth + \"%\";\r\n                // updating the percentage\r\n                this.element.lastElementChild.innerHTML = Math.round(currentWidth).toString();\r\n            }\r\n        }\r\n\r\n    }\r\n    export class Circle extends ElementBase {\r\n\r\n        private divCount: IDictionary = {};\r\n\r\n        constructor(element: HTMLDivElement, circleType: CircleType, classes: string = null) {\r\n            super(element);\r\n            this.divCount[CircleType.Bars] = {className: \"lv-bars\", divCount: 8};\r\n            this.divCount[CircleType.Squares] = {className: \"lv-squares\", divCount: 4};\r\n            this.divCount[CircleType.Circles] = {className: \"lv-circles\", divCount: 12};\r\n            this.divCount[CircleType.Dots] = {className: \"lv-dots\", divCount: 4};\r\n            this.divCount[CircleType.DeterminateCircle] = {className: \"lv-determinate_circle\", divCount: 4};\r\n            this.divCount[CircleType.Spinner] = {className: \"lv-spinner\", divCount: 1};\r\n            this.divCount[CircleType.Dashed] = {className: \"lv-dashed\", divCount: 1};\r\n            this.initLoader(element, this.divCount[circleType]);\r\n            element.classList.add(classes);\r\n        }\r\n\r\n        update(type: string, newValue: number, maxValue: number): void {\r\n            let rotationOffset: number = -45; // initial rotation of the spinning div in css\r\n            // separating individual parts of the circle\r\n            let background: HTMLDivElement = <HTMLDivElement>this.element.children[0];\r\n            let overlay: HTMLDivElement = <HTMLDivElement>this.element.children[1];\r\n            let spinner: HTMLDivElement = <HTMLDivElement>this.element.children[2];\r\n            let percentage: HTMLDivElement = <HTMLDivElement>this.element.children[3];\r\n            // getting the colors defined in css\r\n            let backgroundColor: string = window.getComputedStyle(background).borderTopColor;\r\n            let spinnerColor: string = window.getComputedStyle(spinner).borderTopColor;\r\n            // computing current rotation of spinning part of circle using rotation matrix\r\n            let rotationMatrix = window.getComputedStyle(spinner).getPropertyValue(\"transform\").split(\"(\")[1].split(\")\")[0].split(\",\");\r\n            let currentAngle: number = Math.round(Math.atan2(parseFloat(rotationMatrix[1]), parseFloat(rotationMatrix[0])) * (180 / Math.PI)) - rotationOffset;\r\n            // safety conditions for full and empty circle (360 <=> 0 and that caused problems)\r\n            if (percentage.innerHTML === \"100\") {\r\n                currentAngle = 360;\r\n            }\r\n            if (currentAngle < 0) {\r\n                currentAngle += 360;\r\n            }\r\n            // end point of the animation\r\n            let goalAngle: number;\r\n            if (type === \"add\") {\r\n                goalAngle = currentAngle + Math.round((newValue / maxValue) * 360);\r\n            } else if (type === \"set\") {\r\n                goalAngle = Math.round((newValue / maxValue) * 360);\r\n            }\r\n            // prevent overflow to both sides\r\n            if (goalAngle > 360) {\r\n                goalAngle = 360;\r\n            }\r\n            if (goalAngle < 0) {\r\n                goalAngle = 0;\r\n            }\r\n            let id = setInterval(frame, 3);\r\n            function frame() {\r\n                if (currentAngle === goalAngle) { // stopping the animation when end point is reached\r\n                    clearInterval(id);\r\n                } else {\r\n                    if (currentAngle < goalAngle) { // \"filling\" the circle\r\n                        if (currentAngle === 90) {\r\n                            background.style.borderRightColor = spinnerColor;\r\n                            overlay.style.borderTopColor = \"transparent\";\r\n                        } else if (currentAngle === 180) {\r\n                            background.style.borderBottomColor = spinnerColor;\r\n                        } else if (currentAngle === 270) {\r\n                            background.style.borderLeftColor = spinnerColor;\r\n                        }\r\n                        currentAngle += 1;\r\n                    } else { // \"emptying the circle\"\r\n                        if (currentAngle === 270) {\r\n                            background.style.borderLeftColor = backgroundColor;\r\n                        } else if (currentAngle === 180) {\r\n                            background.style.borderBottomColor = backgroundColor;\r\n                        } else if (currentAngle === 90) {\r\n                            background.style.borderRightColor = backgroundColor;\r\n                            overlay.style.borderTopColor = backgroundColor;\r\n                        }\r\n                        currentAngle -= 1;\r\n                    }\r\n                    // rotating the circle\r\n                    spinner.style.transform = \"rotate(\" + (rotationOffset + currentAngle).toString() + \"deg)\";\r\n                    // updating percentage\r\n                    percentage.innerHTML = (Math.round((currentAngle / 360) * 100)).toString();\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n    export enum BarType {\r\n        Line,\r\n        BorderedLine,\r\n        DeterminateLine,\r\n        DeterminateBorderedLine,\r\n    }\r\n    export enum CircleType {\r\n        Bars,\r\n        Squares,\r\n        Circles,\r\n        Dots,\r\n        DeterminateCircle,\r\n        Spinner,\r\n        Dashed,\r\n    }\r\n}"]}