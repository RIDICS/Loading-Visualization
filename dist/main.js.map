{"version":3,"sources":["main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["namespace lv {\r\n    export interface IDictionary {\r\n        [key: string]: number\r\n    }\r\n}\r\n\r\nclass lv {\r\n    public elements: lv.IDictionary = {\r\n        \"lv-bars\": 8,\r\n        \"lv-squares\": 4,\r\n        \"lv-bordered_line\": 1,\r\n        \"lv-circles\": 12,\r\n        \"lv-line\": 1,\r\n        \"lv-dots\": 4,\r\n        \"lv-determinate_line\": 2,\r\n        \"lv-determinate_bordered_line\": 2,\r\n        \"lv-determinate_circle\": 4,\r\n        \"lv-spinner\": 1,\r\n        \"lv-dashed\": 1\r\n    };\r\n\r\n    private fillElement(element: HTMLElement, elementClass: string, divNumber: number): void {\r\n        for (let i = 0; i < divNumber; i += 1) {\r\n            element.appendChild(document.createElement(\"DIV\"));\r\n        }\r\n        if (elementClass === \"lv-determinate_circle\" || elementClass === \"lv-determninate_line\" || elementClass === \"lv-determinate_bordered_line\") {\r\n            element.lastElementChild.innerHTML = \"0\";\r\n        }\r\n    };\r\n\r\n    public initLoaderAll(): void {\r\n        // iterates through everything and adds specified number of divs\r\n        for(let key in this.elements) {\r\n            let elementsOfClass: HTMLCollectionOf<HTMLDivElement> = <HTMLCollectionOf<HTMLDivElement>>document.getElementsByClassName(key);\r\n            console.log(elementsOfClass);\r\n            for(let i = 0; i < elementsOfClass.length; i += 1) {\r\n                // condition if the div is empty <=> new; otherwise the divs are not added\r\n                if (!elementsOfClass.item(i).hasChildNodes()) {\r\n                    this.fillElement(elementsOfClass.item(i), key, this.elements[key]);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // fills all spinners with appropriate number of divs\r\n    public initLoader(loaderElement: HTMLDivElement): void {\r\n        // manual addition on specified object\r\n        if (loaderElement.hasChildNodes) {\r\n            let loaderClassList: DOMTokenList = loaderElement.classList;\r\n            for (let i = 0; i < loaderClassList.length; i++) {\r\n                for (let key in this.elements) {\r\n                    if (loaderClassList[i] === key) {\r\n                        this.fillElement(loaderElement, loaderClassList[i], this.elements[key]);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    // extends or shortens any BAR specified as a first argument\r\n    public updateBar(type: string, barElement: HTMLDivElement, newValue: number, maxValue: number): void {\r\n        // getting current width of line from the page\r\n        let line: HTMLDivElement = <HTMLDivElement>barElement.firstElementChild;\r\n        let currentWidth: number = parseInt(line.style.width);\r\n        // protective condition for empty line\r\n        if (isNaN(currentWidth)) {\r\n            currentWidth = 0;\r\n        }\r\n        // end point of the animation\r\n        let goalWidth: number;\r\n        if (type === \"add\") {\r\n            goalWidth = currentWidth + Math.round((newValue / maxValue) * 100);\r\n        } else if (type === \"set\") {\r\n            goalWidth = Math.round((newValue / maxValue) * 100);\r\n        }\r\n        // prevent overflow from both sides\r\n        if (goalWidth > 100) {\r\n            goalWidth = 100;\r\n        }\r\n        if (goalWidth < 0) {\r\n            goalWidth = 0;\r\n        }\r\n        let animation = setInterval(frame, 5);\r\n        function frame() {\r\n            if (currentWidth === goalWidth) { // stopping animation when end point is reached\r\n                clearInterval(animation);\r\n            } else if (currentWidth > goalWidth) { // shortening the line\r\n                currentWidth -= 0.5;\r\n            } else { // extending the line\r\n                currentWidth += 0.5;\r\n            }\r\n            line.style.width = currentWidth + \"%\";\r\n            // updating the percentage\r\n            barElement.lastElementChild.innerHTML = Math.round(currentWidth).toString();\r\n        }\r\n    };\r\n\r\n    // controls change of any CIRCLE bar specified as first argument\r\n    public updateCircle(type: string, circleElement: HTMLDivElement, newValue: number, maxValue: number): void {\r\n        let rotationOffset: number = -45; // initial rotation of the spinning div in css\r\n        // separating individual parts of the circle\r\n        let background: HTMLDivElement = <HTMLDivElement>circleElement.children[0];\r\n        let overlay: HTMLDivElement = <HTMLDivElement>circleElement.children[1];\r\n        let spinner: HTMLDivElement = <HTMLDivElement>circleElement.children[2];\r\n        let percentage: HTMLDivElement = <HTMLDivElement>circleElement.children[3];\r\n        // getting the colors defined in css\r\n        let backgroundColor: string = window.getComputedStyle(background).borderTopColor;\r\n        let spinnerColor: string = window.getComputedStyle(spinner).borderTopColor;\r\n        // computing current rotation of spinning part of circle using rotation matrix\r\n        let rotationMatrix = window.getComputedStyle(spinner).getPropertyValue(\"transform\").split(\"(\")[1].split(\")\")[0].split(\",\");\r\n        console.log(rotationMatrix);\r\n        let currentAngle: number = Math.round(Math.atan2(parseFloat(rotationMatrix[1]), parseFloat(rotationMatrix[0])) * (180 / Math.PI)) - rotationOffset;\r\n        // safety conditions for full and empty circle (360 <=> 0 and that caused problems)\r\n        if (percentage.innerHTML === \"100\") {\r\n            currentAngle = 360;\r\n        }\r\n        if (currentAngle < 0) {\r\n            currentAngle += 360;\r\n        }\r\n        // end point of the animation\r\n        let goalAngle: number;\r\n        if (type === \"add\") {\r\n            goalAngle = currentAngle + Math.round((newValue / maxValue) * 360);\r\n        } else if (type === \"set\") {\r\n            goalAngle = Math.round((newValue / maxValue) * 360);\r\n        }\r\n        // prevent overflow to both sides\r\n        if (goalAngle > 360) {\r\n            goalAngle = 360;\r\n        }\r\n        if (goalAngle < 0) {\r\n            goalAngle = 0;\r\n        }\r\n        let id = setInterval(frame, 3);\r\n        function frame() {\r\n            if (currentAngle === goalAngle) { // stopping the animation when end point is reached\r\n                clearInterval(id);\r\n            } else {\r\n                if (currentAngle < goalAngle) { // \"filling\" the circle\r\n                    if (currentAngle === 90) {\r\n                        background.style.borderRightColor = spinnerColor;\r\n                        overlay.style.borderTopColor = \"transparent\";\r\n                    } else if (currentAngle === 180) {\r\n                        background.style.borderBottomColor = spinnerColor;\r\n                    } else if (currentAngle === 270) {\r\n                        background.style.borderLeftColor = spinnerColor;\r\n                    }\r\n                    currentAngle += 1;\r\n                } else { // \"emptying the circle\"\r\n                    if (currentAngle === 270) {\r\n                        background.style.borderLeftColor = backgroundColor;\r\n                    } else if (currentAngle === 180) {\r\n                        background.style.borderBottomColor = backgroundColor;\r\n                    } else if (currentAngle === 90) {\r\n                        background.style.borderRightColor = backgroundColor;\r\n                        overlay.style.borderTopColor = backgroundColor;\r\n                    }\r\n                    currentAngle -= 1;\r\n                }\r\n                // rotating the circle\r\n                spinner.style.transform = \"rotate(\" + (rotationOffset + currentAngle).toString() + \"deg)\";\r\n                // updating percentage\r\n                percentage.innerHTML = (Math.round((currentAngle / 360) * 100)).toString();\r\n            }\r\n        }\r\n    };\r\n\r\n    // resets specified element\r\n    public reset(type: string, element: HTMLDivElement, maxValue: number): void {\r\n        if (type === \"bar\") {\r\n            this.updateBar('set', element, 0, maxValue);\r\n        } else if (type === \"circle\") {\r\n            this.updateCircle('set', element, 0, maxValue);\r\n        }\r\n    };\r\n\r\n    // fills whole loading bar\r\n    public fill(type: string, element: HTMLDivElement, maxValue: number): void {\r\n        if (type === \"bar\") {\r\n            this.updateBar('set', element, maxValue, maxValue);\r\n        } else if (type === \"circle\") {\r\n            this.updateCircle('set', element, maxValue, maxValue);\r\n        }\r\n    };\r\n\r\n    // adds value to loading bar\r\n    public add(type: string, element: HTMLDivElement, addValue: number, maxValue: number): void {\r\n        if (type === \"bar\") {\r\n            this.updateBar('add', element, addValue, maxValue);\r\n        } else if (type === \"circle\") {\r\n            this.updateCircle('add', element, addValue, maxValue);\r\n        }\r\n    };\r\n    // automatically detects new elements in DOM and appends divs to them (calls function complete_divs();\r\n    // defining what to do on change of DOM - child mutation\r\n    private callback(mutationList, observer: MutationObserver): void {\r\n        mutationList.forEach(function(mutation) {\r\n            if (mutation.type === \"childList\") {\r\n                try {\r\n                    if (mutation.addedNodes[0].classList.length > 0) {\r\n                        // filling the node with divs when it is empty\r\n                        this.initLoaderAll();\r\n                    }\r\n                } catch (error) {}\r\n            }\r\n        });\r\n    };\r\n    // initializing the observer and starting observation\r\n    private observer: MutationObserver;\r\n    constructor() {\r\n        this.observer = new MutationObserver(this.callback);\r\n    }\r\n    public startObserving() {\r\n        this.observer.observe(document.body, {childList: true, subtree: true});\r\n    }\r\n}"]}